
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target)

print("Sample data:\n", X.head())
print("\nTarget classes:", np.unique(y))
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


dtree = DecisionTreeClassifier(random_state=42)
dtree.fit(X_train, y_train)
y_pred_tree = dtree.predict(X_test)


acc_tree = accuracy_score(y_test, y_pred_tree)
print("\nDecision Tree Accuracy:", acc_tree)
print("Classification Report:\n", classification_report(y_test, y_pred_tree))

# Visualize Decision Tree
plt.figure(figsize=(20,10))
plot_tree(dtree, feature_names=X.columns, class_names=data.target_names, filled=True, max_depth=3)
plt.title("Decision Tree (showing first few levels)")
plt.show()


dtree_limited = DecisionTreeClassifier(max_depth=3, random_state=42)
dtree_limited.fit(X_train, y_train)
y_pred_limited = dtree_limited.predict(X_test)
acc_limited = accuracy_score(y_test, y_pred_limited)
print("\nDecision Tree (max_depth=3) Accuracy:", acc_limited)


rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

acc_rf = accuracy_score(y_test, y_pred_rf)
print("\nRandom Forest Accuracy:", acc_rf)
print("Classification Report:\n", classification_report(y_test, y_pred_rf))


importances = rf.feature_importances_
feat_importances = pd.Series(importances, index=X.columns)
feat_importances.nlargest(10).plot(kind='barh')
plt.title("Top 10 Feature Importances (Random Forest)")
plt.show()

# Cross-validation
scores = cross_val_score(rf, X, y, cv=5)
print("\nCross-Validation Scores (Random Forest):", scores)
print("Average CV Score:", np.mean(scores))
